require 'benchmark'


digit_number = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

def get_product(input, target)
	product_array = []
	adjacent_array = []
	digit_number_array = input.to_s.split('').map {|num| num.to_i}

	

	for num in (0..999)
			check = num 
			count = 0
			tmp = []
			
			until count == target
								
				if digit_number_array[check] == 0
					break
				else
					tmp << digit_number_array[check]
					count += 1
				end
				adjacent_array << tmp if count == target
				check += 1
			end
	end
	

	for pair in adjacent_array
		product =  pair.inject { | num1, num2| num1 *= num2}
		product_array << product
	end
	product_array.sort!
	product_array[-1]
end

puts Benchmark.measure {get_product(digit_number, 13)}	

#puts get_product(digit_number, 13)